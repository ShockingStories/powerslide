function updateCars(t){document.getElementById("carNumber").value=t,document.getElementById("carRange").value=t;var n=shockingUpdate({electric_cars:t});console.log("Data from shockingUpdate: ",n),updateGraph("gwh-chart",n.gen_production),updateGraph("co2-chart",{Geothermal:n.gen_emissions.Geothermal,Coal:n.gen_emissions.Coal,Gas:n.gen_emissions.Gas,Road:n.fleet_emissions.Road})}function preprocessData(t,n){var e=[1],r=0;for(var a in t)t.hasOwnProperty(a)&&(r+=t[a],e.push(t[a]));n>0&&e.push(n);for(var o=1;o<e.length;o++)e[o]=Math.round(e[o]/r*100);return e}function updateTotal(t,n){var e=0;for(var r in n)n.hasOwnProperty(r)&&(e+=n[r]);return e=Math.round(e),console.log("Updated total: ",e),document.getElementById(t).innerHTML=e,e}function updateGraph(t,n){var e=80,r=300;console.log("Data passed in: ",n);var a=t.split("-")[0]+"-total",o=updateTotal(a,n);totals[a]||(console.log("Element: ",a,document.getElementById(a).innerHTML),totals[a]=parseInt(document.getElementById(a).innerHTML,10),console.log("TOTALS: ",totals));for(var s=totals[a]-o,l=document.getElementById(t);l.firstChild;)l.removeChild(l.firstChild);var c=d3.select("#"+t).append("svg:svg").attr("class","chart").attr("width",e).attr("height",r).append("svg:g").attr("transform","translate(0,"+r+")");console.log("DELTA: ",s);for(var i=[preprocessData(n,s)],d=[],u=0;u<i[0].length-1;u++)d.push("rgb("+randomRGB()+","+randomRGB()+","+randomRGB()+")"),s>0&&(d[i[0].length-1]="rgb(255,255,255)");x=d3.scale.ordinal().rangeRoundBands([0,e]),y=d3.scale.linear().range([0,r]),z=d3.scale.ordinal().range(d);for(var g=[],u=1;u<i[0].length;u++)g.push("c"+u);var p=g.map(function(t,n){return i.map(function(t,e){return{x:e,y:t[n+1]}})}),m=d3.layout.stack()(p);x.domain(m[0].map(function(t){return t.x})),y.domain([0,d3.max(m[m.length-1],function(t){return t.y0+t.y})]);{var h=c.selectAll("g.valgroup").data(m).enter().append("svg:g").attr("class","valgroup").style("fill",function(t,n){return z(n)}).style("stroke",function(t,n){return d3.rgb(z(n)).darker()});h.selectAll("rect").data(function(t){return t}).enter().append("svg:rect").attr("x",function(t){return x(t.x)}).attr("y",function(t){return-y(t.y0)-y(t.y)}).attr("height",function(t){return y(t.y)}).attr("width",Math.min.apply(null,[x.rangeBand()-2,100]))}}function randomRGB(){return Math.floor(256*Math.random())}function columnGraph(t,n){for(var e=80,r=300,a=d3.select(t).append("svg:svg").attr("class","chart").attr("width",e).attr("height",r).append("svg:g").attr("transform","translate(0,300)"),o=[n],s=[],l=0;l<o[0].length-1;l++)s.push("rgb("+randomRGB()+","+randomRGB()+","+randomRGB()+")");x=d3.scale.ordinal().rangeRoundBands([0,e]),y=d3.scale.linear().range([0,r]),z=d3.scale.ordinal().range(s);var c=["c1","c2","c3","c4","c5"].map(function(t,n){return o.map(function(t,e){return{x:e,y:t[n+1]}})}),i=d3.layout.stack()(c);x.domain(i[0].map(function(t){return t.x})),y.domain([0,d3.max(i[i.length-1],function(t){return t.y0+t.y})]);{var d=a.selectAll("g.valgroup").data(i).enter().append("svg:g").attr("class","valgroup").style("fill",function(t,n){return z(n)}).style("stroke",function(t,n){return d3.rgb(z(n)).darker()});d.selectAll("rect").data(function(t){return t}).enter().append("svg:rect").attr("x",function(t){return x(t.x)}).attr("y",function(t){return-y(t.y0)-y(t.y)}).attr("height",function(t){return y(t.y)}).attr("width",Math.min.apply(null,[x.rangeBand()-2,100]))}}function shockingUpdate(t){console.log("shockingUpdate - Inputs: "+JSON.stringify(t));var n=getBaseline(),e=n.gen_production,r=n.gen_emissions,a=n.gen_cost,o={Road:12688},s=t.electric_cars,l=s/100;o.Road=o.Road*(1-l),ev_power_reqts=2406.4*3341013*l,ev_power_reqts/=1e6;var c=0;for(var i in e)c+=e[i];var d=1+ev_power_reqts/c;console.log("total: "+c),console.log("increase from electric vehicles: "+d),console.log("ev_power_reqts "+ev_power_reqts);var u=(t.solar_houses,5260*t.solar_houses);u/=1e6,console.log("solar production: "+u);var g=u/c;d-=g;for(var i in r)r[i]=r[i]*d;for(var i in e)e[i]=e[i]*d;e.Solar=u;for(var i in r)r[i]=r[i]*d;for(var i in a)a[i]=a[i]*d;var p={gen_production:e,gen_emissions:r,gen_cost:a,fleet_emissions:o};return console.log("Result: "+JSON.stringify(p)),p}function getBaseline(){var t={Hydro:24095,Geothermal:6487,Wind:2187,Coal:1832,Gas:6626},n={Hydro:0,Geothermal:847.32,Wind:0,Coal:1222.2,Gas:3405.51},e={Hydro:100,Geothermal:150,Wind:200,Coal:250,Gas:300},r={gen_production:t,gen_emissions:n,gen_cost:e};return r}function mockGWh(){return{Hydro:24095,Geothermal:6487,Wind:2187,Coal:1832,Gas:6626}}function mockAdjustGWh(){return{Hydro:24,Geothermal:648,Wind:1218,Coal:832,Gas:362}}function mockGenerationEmissions(){return{Hydro:0,Geothermal:847.32,Wind:0,Coal:1222.2,Gas:3405.51}}function mockFleetEmissions(){return{Road:12688}}var totals={};document.addEventListener("DOMContentLoaded",function(t){updateCars(0),columnGraph("#cost-chart",[1,10,15,15,35,50]),columnGraph("#investment-chart",[1,5,10,15,45,50])});
//# sourceMappingURL=data:application/json;base64,