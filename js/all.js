function updateCars(r){document.getElementById("carNumber").value=r,document.getElementById("carRange").value=r,updateGraph("gwh-chart",mockAdjustGWh())}function columnGraph(r,t){for(var n=80,e=300,a=d3.select(r).append("svg:svg").attr("class","chart").attr("width",n).attr("height",e).append("svg:g").attr("transform","translate(0,300)"),o=[t],c=[],l=0;l<o[0].length-1;l++)c.push("rgb("+randomRGB()+","+randomRGB()+","+randomRGB()+")");x=d3.scale.ordinal().rangeRoundBands([0,n]),y=d3.scale.linear().range([0,e]),z=d3.scale.ordinal().range(c);var s=["c1","c2","c3","c4","c5"].map(function(r,t){return o.map(function(r,n){return{x:n,y:r[t+1]}})}),u=d3.layout.stack()(s);x.domain(u[0].map(function(r){return r.x})),y.domain([0,d3.max(u[u.length-1],function(r){return r.y0+r.y})]);{var d=a.selectAll("g.valgroup").data(u).enter().append("svg:g").attr("class","valgroup").style("fill",function(r,t){return z(t)}).style("stroke",function(r,t){return d3.rgb(z(t)).darker()});d.selectAll("rect").data(function(r){return r}).enter().append("svg:rect").attr("x",function(r){return x(r.x)}).attr("y",function(r){return-y(r.y0)-y(r.y)}).attr("height",function(r){return y(r.y)}).attr("width",Math.min.apply(null,[x.rangeBand()-2,100]))}}function preprocessData(r){var t=[1],n=0;for(var e in r)r.hasOwnProperty(e)&&(n+=r[e],t.push(r[e]));for(var a=1;a<t.length;a++)t[a]=Math.round(t[a]/n*100);return t}function updateGraph(r,t){var n=80,e=300,a=document.getElementById(r);for(console.log(a);a.firstChild;)a.removeChild(a.firstChild);for(var o=d3.select("#"+r).append("svg:svg").attr("class","chart").attr("width",n).attr("height",e).append("svg:g").attr("transform","translate(0,"+e+")"),c=[preprocessData(t)],l=[],s=0;s<c[0].length-1;s++)l.push("rgb("+randomRGB()+","+randomRGB()+","+randomRGB()+")");x=d3.scale.ordinal().rangeRoundBands([0,n]),y=d3.scale.linear().range([0,e]),z=d3.scale.ordinal().range(l);var u=["c1","c2","c3","c4","c5"].map(function(r,t){return c.map(function(r,n){return{x:n,y:r[t+1]}})}),d=d3.layout.stack()(u);x.domain(d[0].map(function(r){return r.x})),y.domain([0,d3.max(d[d.length-1],function(r){return r.y0+r.y})]);{var i=o.selectAll("g.valgroup").data(d).enter().append("svg:g").attr("class","valgroup").style("fill",function(r,t){return z(t)}).style("stroke",function(r,t){return d3.rgb(z(t)).darker()});i.selectAll("rect").data(function(r){return r}).enter().append("svg:rect").attr("x",function(r){return x(r.x)}).attr("y",function(r){return-y(r.y0)-y(r.y)}).attr("height",function(r){return y(r.y)}).attr("width",Math.min.apply(null,[x.rangeBand()-2,100]))}}function randomRGB(){return Math.floor(256*Math.random())}function shockingUpdate(r){console.log("shockingUpdate - Inputs: "+JSON.stringify(r));var t={Hydro:24095,Geothermal:6487,Wind:2187,Coal:1832,Gas:6626},n={Hydro:0,Geothermal:847.32,Wind:0,Coal:1222.2,Gas:3405.51},e={Road:12688},a=r.electric_cars,o=a/100;e.Road=e.Road*(1-o),ev_power_reqts=2406.4*3341013*o,ev_power_reqts/=1e6;var c=0;for(var l in t)c+=t[l];var s=1+ev_power_reqts/c;console.log("total: "+c),console.log("increase from electric vehicles: "+s),console.log("ev_power_reqts "+ev_power_reqts);for(var l in n)n[l]=n[l]*s;var u={gen_production:t,gen_emissions:n,fleet_emissions:e};return console.log("Result: "+JSON.stringify(u)),u}function mockGWh(){return{Hydro:24095,Geothermal:6487,Wind:2187,Coal:1832,Gas:6626}}function mockAdjustGWh(){return{Hydro:24,Geothermal:648,Wind:1218,Coal:832,Gas:362}}function mockGenerationEmissions(){return{Hydro:0,Geothermal:847.32,Wind:0,Coal:1222.2,Gas:3405.51}}function mockFleetEmissions(){return{Road:12688}}document.addEventListener("DOMContentLoaded",function(r){columnGraph("#co2-chart",[1,10,20,20,25,50]),updateGraph("gwh-chart",mockGWh()),columnGraph("#cost-chart",[1,10,15,15,35,50]),columnGraph("#investment-chart",[1,5,10,15,45,50])});var input_example={electric_cars:2};
//# sourceMappingURL=data:application/json;base64,