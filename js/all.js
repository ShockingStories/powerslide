function updateCars(r){document.getElementById("carNumber").value=r,document.getElementById("carRange").value=r;var t=shockingUpdate({electric_cars:r});console.log(" ---- ",r," : ",t.gen_production),updateGraph("gwh-chart",t.gen_production),updateGraph("co2-chart",{Geothermal:t.gen_emissions.Geothermal,Coal:t.gen_emissions.Coal,Gas:t.gen_emissions.Gas,Road:t.fleet_emissions.Road})}function columnGraph(r,t){for(var n=80,e=300,a=d3.select(r).append("svg:svg").attr("class","chart").attr("width",n).attr("height",e).append("svg:g").attr("transform","translate(0,300)"),o=[t],s=[],l=0;l<o[0].length-1;l++)s.push("rgb("+randomRGB()+","+randomRGB()+","+randomRGB()+")");x=d3.scale.ordinal().rangeRoundBands([0,n]),y=d3.scale.linear().range([0,e]),z=d3.scale.ordinal().range(s);var c=["c1","c2","c3","c4","c5"].map(function(r,t){return o.map(function(r,n){return{x:n,y:r[t+1]}})}),i=d3.layout.stack()(c);x.domain(i[0].map(function(r){return r.x})),y.domain([0,d3.max(i[i.length-1],function(r){return r.y0+r.y})]);{var d=a.selectAll("g.valgroup").data(i).enter().append("svg:g").attr("class","valgroup").style("fill",function(r,t){return z(t)}).style("stroke",function(r,t){return d3.rgb(z(t)).darker()});d.selectAll("rect").data(function(r){return r}).enter().append("svg:rect").attr("x",function(r){return x(r.x)}).attr("y",function(r){return-y(r.y0)-y(r.y)}).attr("height",function(r){return y(r.y)}).attr("width",Math.min.apply(null,[x.rangeBand()-2,100]))}}function preprocessData(r){var t=[1],n=0;for(var e in r)r.hasOwnProperty(e)&&(n+=r[e],t.push(r[e]));for(var a=1;a<t.length;a++)t[a]=Math.round(t[a]/n*100);return t}function updateGraph(r,t){var n=80,e=300,a=document.getElementById(r);for(console.log(a);a.firstChild;)a.removeChild(a.firstChild);for(var o=d3.select("#"+r).append("svg:svg").attr("class","chart").attr("width",n).attr("height",e).append("svg:g").attr("transform","translate(0,"+e+")"),s=[preprocessData(t)],l=[],c=0;c<s[0].length-1;c++)l.push("rgb("+randomRGB()+","+randomRGB()+","+randomRGB()+")");x=d3.scale.ordinal().rangeRoundBands([0,n]),y=d3.scale.linear().range([0,e]),z=d3.scale.ordinal().range(l);for(var i=[],c=1;c<s[0].length;c++)i.push("c"+c);var d=i.map(function(r,t){return s.map(function(r,n){return{x:n,y:r[t+1]}})}),u=d3.layout.stack()(d);x.domain(u[0].map(function(r){return r.x})),y.domain([0,d3.max(u[u.length-1],function(r){return r.y0+r.y})]);{var g=o.selectAll("g.valgroup").data(u).enter().append("svg:g").attr("class","valgroup").style("fill",function(r,t){return z(t)}).style("stroke",function(r,t){return d3.rgb(z(t)).darker()});g.selectAll("rect").data(function(r){return r}).enter().append("svg:rect").attr("x",function(r){return x(r.x)}).attr("y",function(r){return-y(r.y0)-y(r.y)}).attr("height",function(r){return y(r.y)}).attr("width",Math.min.apply(null,[x.rangeBand()-2,100]))}}function randomRGB(){return Math.floor(256*Math.random())}function shockingUpdate(r){console.log("shockingUpdate - Inputs: "+JSON.stringify(r));var t={Hydro:24095,Geothermal:6487,Wind:2187,Coal:1832,Gas:6626},n={Hydro:0,Geothermal:847.32,Wind:0,Coal:1222.2,Gas:3405.51},e={Road:12688},a=r.electric_cars,o=a/100;e.Road=e.Road*(1-o),ev_power_reqts=2406.4*3341013*o,ev_power_reqts/=1e6;var s=0;for(var l in t)s+=t[l];var c=1+ev_power_reqts/s;console.log("total: "+s),console.log("increase from electric vehicles: "+c),console.log("ev_power_reqts "+ev_power_reqts);for(var l in n)n[l]=n[l]*c;var i={gen_production:t,gen_emissions:n,fleet_emissions:e};return console.log("Result: "+JSON.stringify(i)),i}function mockGWh(){return{Hydro:24095,Geothermal:6487,Wind:2187,Coal:1832,Gas:6626}}function mockAdjustGWh(){return{Hydro:24,Geothermal:648,Wind:1218,Coal:832,Gas:362}}function mockGenerationEmissions(){return{Hydro:0,Geothermal:847.32,Wind:0,Coal:1222.2,Gas:3405.51}}function mockFleetEmissions(){return{Road:12688}}document.addEventListener("DOMContentLoaded",function(r){updateCars(0),columnGraph("#cost-chart",[1,10,15,15,35,50]),columnGraph("#investment-chart",[1,5,10,15,45,50])});var input_example={electric_cars:2};
//# sourceMappingURL=data:application/json;base64,